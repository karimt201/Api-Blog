openapi: 3.0.3
info:
  title: Talentino Blog
  version: 1.0.11

paths:
  /blog:
    post:
      tags:
        - blogs
      summary: Add a new blog to the store
      description: Add a new blog to the store
      operationId: addPet
      requestBody:
        description: Create a new blog in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/blogs"
          application/xml:
            schema:
              $ref: "#/components/schemas/blogs"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/blogs"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/blogs"
            application/xml:
              schema:
                $ref: "#/components/schemas/blogs"
        "400":
          description: Invalid input
        "422":
          description: Validation exception

  /blogs:
    get:
      tags:
        - blogs
      summary: Finds blogs by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findblogssByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/blogs"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/blogs"
        "400":
          description: Invalid status value

  /home:
    get:
      tags:
        - blogs
      summary: Finds blogs by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findblogsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/blogs"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/blogs"
        "400":
          description: Invalid tag value

  /blogs/{blogId}:
    get:
      tags:
        - blogs
      summary: Find blog by ID
      description: Returns a single blog
      operationId: getblogsById
      parameters:
        - name: blogId
          in: path
          description: ID of blog to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/blogs"
            application/xml:
              schema:
                $ref: "#/components/schemas/blogs"
        "400":
          description: Invalid ID supplied
        "404":
          description: blog not found

  /courses:
    get:
      tags:
        - courses
      summary: Get a paginated list of courses
      description: Retrieve a list of courses with pagination
      operationId: getCourses
      parameters:
        - name: page
          in: query
          description: Page number of the result set
          required: false
          schema:
            type: integer
            default: 1
        - name: per-page
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            default: 2
      responses:
        "200":
          description: A list of paginated courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  courses:
                    type: array
                    items:
                      $ref: "#/components/schemas/Course"
                  pagination:
                    type: object
                    properties:
                      count:
                        type: integer
                      page:
                        type: integer
                      per_page:
                        type: integer
                      pages:
                        type: integer
        "400":
          description: Invalid input

  /course:
    post:
      tags:
        - courses
      summary: Create a new course
      description: Add a new course to the database
      operationId: createCourse
      requestBody:
        description: Course object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        "201":
          description: Course created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course created successfully
                  course_id:
                    type: integer
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /lessons:
    get:
      tags:
        - lessons
      summary: Get a paginated list of lessons
      description: Retrieve a list of lessons with pagination
      operationId: getLessons
      parameters:
        - name: page
          in: query
          description: Page number of the result set
          required: false
          schema:
            type: integer
            default: 1
        - name: per-page
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            default: 4
      responses:
        "200":
          description: A list of paginated lessons
          content:
            application/json:
              schema:
                type: object
                properties:
                  lessons:
                    type: array
                    items:
                      $ref: "#/components/schemas/Lesson"
                  pagination:
                    type: object
                    properties:
                      count:
                        type: integer
                      page:
                        type: integer
                      per_page:
                        type: integer
                      pages:
                        type: integer
        "400":
          description: Invalid input

  /lesson:
    post:
      tags:
        - lessons
      summary: Create a new lesson
      description: Add a new lesson to the database
      operationId: createLesson
      requestBody:
        description: Lesson object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Lesson"
      responses:
        "201":
          description: Lesson created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lesson created successfully
                  lesson_id:
                    type: integer
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /events:
    get:
      tags:
        - events
      summary: Get a paginated list of events
      operationId: getEvents
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: per-page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 2
        - name: search
          in: query
          description: Search query for event titles
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of events with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: "#/components/schemas/Event"
                  pagination:
                    type: object
                    properties:
                      count:
                        type: integer
                      page:
                        type: integer
                      per_page:
                        type: integer
                      pages:
                        type: integer
        "400":
          description: Invalid request

    post:
      tags:
        - events
      summary: Create a new event
      operationId: createEvent
      requestBody:
        description: Event object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "201":
          description: Event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event created successfully
                  event_id:
                    type: integer
        "500":
          description: Internal server error

  /events/{event_id}:
    get:
      tags:
        - events
      summary: Get event by ID
      description: Retrieve detailed information about a specific event by its ID.
      operationId: getEventById
      parameters:
        - name: event_id
          in: path
          description: ID of the event to retrieve
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Detailed event information
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: "#/components/schemas/EventDetails"
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event not found

    put:
      tags:
        - events
      summary: Update an existing event by ID
      description: Update the details of a specific event by providing its ID.
      operationId: updateEvent
      parameters:
        - name: event_id
          in: path
          description: ID of the event to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Event object with updated data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Event updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event updated successfully
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event not found

    delete:
      tags:
        - events
      summary: Delete an event by ID
      description: Delete a specific event by its ID.
      operationId: deleteEvent
      parameters:
        - name: event_id
          in: path
          description: ID of the event to delete
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Event deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event deleted successfully
        "404":
          description: Event not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event not found

  /speakers:
    get:
      tags:
        - speakers
      summary: Get a list of speakers
      operationId: getSpeakers
      responses:
        "200":
          description: List of speakers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Speaker"

    post:
      tags:
        - speakers
      summary: Create a new speaker
      operationId: createSpeaker
      requestBody:
        description: Speaker object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Speaker"
      responses:
        "201":
          description: Speaker created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Speaker created successfully
                  speaker_id:
                    type: integer
        "500":
          description: Internal server error

  /agenda:
    get:
      tags:
        - agenda
      summary: Get a list of agenda items
      operationId: getAgenda
      responses:
        "200":
          description: List of agenda items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agenda"

    post:
      tags:
        - agenda
      summary: Create a new agenda item
      operationId: createAgenda
      requestBody:
        description: Agenda object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Agenda"
      responses:
        "201":
          description: Agenda created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Agenda created successfully
                  agenda_id:
                    type: integer
        "500":
          description: Internal server error

components:
  schemas:
    blogs:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        img:
          type: string
        title:
          type: string
        description:
          type: string
        read_time:
          type: string
        date:
          type: string
        user_id:
          type: integer
        keywords:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
      xml:
        name: blogs

    Course:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
        description:
          type: string
        icon:
          type: string
        user_id:
          type: integer
          example: 1
        lessons:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string
              slug:
                type: string
      xml:
        name: Course

    Lesson:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Introduction to Python"
        slug:
          type: string
        date:
          type: string
          format: date-time
          example: "2024-09-25T12:34:56Z"
        content:
          type: string
          example: "This is the content of the lesson."
        thumbnail:
          type: string
          example: "lesson_thumbnail.png"
        course_title:
          type: string
          example: "Programming Basics"
        user_img:
          type: string
          example: "user_profile.png"
        username:
          type: string
          example: "JohnDoe"
      xml:
        name: Lesson

    Event:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        icon:
          type: string
        img:
          type: string
        subtitle:
          type: string
        date:
          type: string
        starting_time:
          type: string
        description:
          type: string
        user_id:
          type: integer

    Speaker:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        img:
          type: string
        position:
          type: string
        company_name:
          type: string
        event_id:
          type: integer

    Agenda:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        location:
          type: string
        agenda_type:
          type: string
        status:
          type: string
        starting_date:
          type: string
        end_date:
          type: string
        keywords:
          type: array
          items:
            type: string
        event_id:
          type: integer
        speaker_id:
          type: integer

  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/blogs"
        application/xml:
          schema:
            $ref: "#/components/schemas/blogs"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/blogs"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
